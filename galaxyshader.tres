[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[ext_resource path="res://flashinglightsshader.tres" type="Shader" id=1]
[ext_resource path="res://assets/perlinnose.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeTexture" id=2]
output_port_for_preview = 0
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=7]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarConstant" id=8]
constant = 0.4

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
output_port_for_preview = 0
function = 29

[sub_resource type="VisualShader" id=3]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out2p1 = 1.000000;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Input:5
	float n_out5p0 = TIME;

// Scalar:7
	float n_out7p0 = 0.400000;

// ScalarOp:8
	float n_out8p0 = n_out5p0 * n_out7p0;

// VectorOp:6
	vec3 n_out6p0 = n_out4p0 - vec3(n_out8p0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out6p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// ScalarFunc:9
	float n_out9p0 = roundEven(dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)));

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -803.927, 175.451 )
nodes/fragment/0/position = Vector2( 360, 160 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -80, 100 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -300, 220 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -1240, 100 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -1160, 400 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( -600, 260 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( -1140, 520 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( -860, 380 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( 0, 320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 4, 0, 6, 0, 6, 0, 3, 0, 5, 0, 8, 0, 7, 0, 8, 1, 8, 0, 6, 1, 3, 0, 9, 0, 9, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[resource]
next_pass = SubResource( 4 )
shader = ExtResource( 1 )
