[gd_resource type="VisualShader" load_steps=5 format=2]

[ext_resource path="res://assets/noise.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
output_port_for_preview = 0
constant = 0.3

[sub_resource type="VisualShaderNodeVec3Constant" id=9]
output_port_for_preview = 0
constant = Vector3( 1, 3, 3 )

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 1 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_frg_6;



void vertex() {
// Output:0

}

void fragment() {
// Vector:5
	vec3 n_out5p0 = vec3(1.000000, 3.000000, 3.000000);

// Scalar:3
	float n_out3p0 = 0.300000;

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, UV.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// Output:0
	ALBEDO = n_out5p0;
	ALPHA = n_out3p0;
	NORMALMAP = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -179.444, 16.6944 )
nodes/fragment/0/position = Vector2( 1320, 100 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 680, 40 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( 360, 240 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( 900, 320 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 3, 0, 0, 1, 6, 0, 0, 8 )
