[gd_resource type="VisualShader" load_steps=14 format=2]

[ext_resource path="res://perlinnose.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=21]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=22]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=23]

[sub_resource type="VisualShaderNodeInput" id=24]
input_name = "time"

[sub_resource type="VisualShaderNodeVec3Constant" id=10]
constant = Vector3( 5, 0, 0 )

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=12]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=20]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=25]
function = 31

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Vector:2
	vec3 n_out2p0 = vec3(5.000000, 0.000000, 0.000000);

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Input:13
	float n_out13p0 = TIME;

// ScalarFunc:9
	float n_out9p0 = 1.0 - n_out13p0;

// ScalarOp:10
	float n_in10p1 = 2.00000;
	float n_out10p0 = n_out9p0 / n_in10p1;

// ScalarOp:11
	float n_in11p1 = 0.00000;
	float n_out11p0 = n_out10p0 - n_in11p1;

// VectorOp:12
	vec3 n_out12p0 = n_out4p0 + vec3(n_out11p0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out12p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Input:5
	float n_out5p0 = TIME;

// ScalarFunc:6
	float n_out6p0 = sin(n_out5p0);

// ScalarOp:7
	float n_in7p1 = 2.00000;
	float n_out7p0 = n_out6p0 / n_in7p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)) - n_out7p0;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out8p0;
	NORMALMAP = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -707.218, 57.506 )
nodes/fragment/0/position = Vector2( 980, 140 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 220, 140 )
nodes/fragment/3/node = SubResource( 11 )
nodes/fragment/3/position = Vector2( 300, 260 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( -700, 120 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( -200, 480 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( 80, 520 )
nodes/fragment/7/node = SubResource( 19 )
nodes/fragment/7/position = Vector2( 440, 520 )
nodes/fragment/8/node = SubResource( 20 )
nodes/fragment/8/position = Vector2( 680, 440 )
nodes/fragment/9/node = SubResource( 25 )
nodes/fragment/9/position = Vector2( -660, 360 )
nodes/fragment/10/node = SubResource( 21 )
nodes/fragment/10/position = Vector2( -440, 320 )
nodes/fragment/11/node = SubResource( 22 )
nodes/fragment/11/position = Vector2( -220, 300 )
nodes/fragment/12/node = SubResource( 23 )
nodes/fragment/12/position = Vector2( 20, 180 )
nodes/fragment/13/node = SubResource( 24 )
nodes/fragment/13/position = Vector2( -900, 340 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 5, 0, 6, 0, 6, 0, 7, 0, 3, 0, 8, 0, 7, 0, 8, 1, 8, 0, 0, 1, 9, 0, 10, 0, 10, 0, 11, 0, 13, 0, 9, 0, 11, 0, 12, 1, 4, 0, 12, 0, 12, 0, 3, 0, 3, 0, 0, 8 )
